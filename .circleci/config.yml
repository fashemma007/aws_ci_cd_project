version: 2.1
# Use a package of configuration called an orb.
orbs:
  ## Choose either one of the orbs below 
  ## aws-cli: circleci/aws-cli@2.0.3
  ## welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

# Orchestrate or schedule a set of jobs
jobs:
  # Exercise: Creating a Simple Workflow
  # Exercise: Environment Variables
  # Exercise: Reusable Job Code 
  print_greetings:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id:
          id: << pipeline.id >>
      - run: echo HELLO
      - run: echo WORLD
      - run: echo $_env_name

  # Exercise: Infrastructure Creation
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name ansible-cloudformation-stack --region us-east-1
## Note: The below was commented out to keep a unique and constant stack name
# --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              # --region us-east-1
  
# Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["a1:ec:5e:bb:0e:fc:45:4b:a0:c9:3e:f9:24:5f:92:71"] 
      - run:
          name: Install Ansible
          command: |
            ## Install Ansible
              apk add --update ansible
      - run:
          name: Add instance ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters  "Name=tag:project,Values=ansible-instance" --output text >> inventory.txt
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory main-remote.yml -vvvv

workflows:
  # Name the workflow "welcome"
  my_workflow:
    # Run the welcome/run job in its own container
    jobs:
      - create_infrastructure
      - configure_infrastructure: 
          requires: [create_infrastructure]